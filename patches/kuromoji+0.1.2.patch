diff --git a/node_modules/kuromoji/src/loader/BrowserDictionaryLoader.js b/node_modules/kuromoji/src/loader/BrowserDictionaryLoader.js
index 04bfdcd..9d29ca8 100644
--- a/node_modules/kuromoji/src/loader/BrowserDictionaryLoader.js
+++ b/node_modules/kuromoji/src/loader/BrowserDictionaryLoader.js
@@ -37,24 +37,72 @@ BrowserDictionaryLoader.prototype = Object.create(DictionaryLoader.prototype);
  * @param {BrowserDictionaryLoader~onLoad} callback Callback function
  */
 BrowserDictionaryLoader.prototype.loadArrayBuffer = function (url, callback) {
-    var xhr = new XMLHttpRequest();
-    xhr.open("GET", url, true);
-    xhr.responseType = "arraybuffer";
-    xhr.onload = function () {
-        if (this.status > 0 && this.status !== 200) {
-            callback(xhr.statusText, null);
-            return;
+    // Extract filename from the URL
+    const filename = url.split('/').pop();
+
+    // Function to convert ArrayBuffer to Base64
+    function arrayBufferToBase64(buffer) {
+        var binary = '', bytes;
+        bytes = new Uint8Array(buffer, 0, buffer.byteLength);
+        
+        var len = bytes.byteLength;
+        for (var i = 0; i < len; i++) {
+            binary += String.fromCharCode(bytes[i]);
         }
-        var arraybuffer = this.response;
+        return window.btoa(binary);
+    }
 
-        var gz = new zlib.Zlib.Gunzip(new Uint8Array(arraybuffer));
-        var typed_array = gz.decompress();
-        callback(null, typed_array.buffer);
-    };
-    xhr.onerror = function (err) {
-        callback(err, null);
-    };
-    xhr.send();
+    // Function to convert Base64 to ArrayBuffer
+    function base64ToArrayBuffer(base64) {
+        var binary_string = window.atob(base64);
+        var len = binary_string.length;
+        var bytes;
+        bytes = new Uint8Array(len);
+
+        for (var i = 0; i < len; i++) {
+            bytes[i] = binary_string.charCodeAt(i);
+        }
+        return bytes.buffer;
+    }
+
+    // Try to find the filename in the chrome extension storage
+    chrome.storage.local.get([filename], function(result) {
+        if (result[filename]) {
+            // If found in storage, directly call the callback with the stored data
+            console.log('Loading Dictionary from storage');
+            var arrayBuffer = base64ToArrayBuffer(result[filename]);
+            callback(null, arrayBuffer);
+        } else {
+            // If not found, fetch using the original method
+            console.log('Couldn not find in storage, Fetching from network');
+            const xhr = new XMLHttpRequest();
+            xhr.open("GET", url, true);
+            xhr.responseType = "arraybuffer";
+            xhr.onload = function () {
+                if (this.status > 0 && this.status !== 200) {
+                    callback(xhr.statusText, null);
+                    return;
+                }
+                const arraybuffer = this.response;
+
+                const gz = new zlib.Zlib.Gunzip(new Uint8Array(arraybuffer));
+                const typed_array = gz.decompress();
+                // Convert ArrayBuffer to Base64
+                const base64String = arrayBufferToBase64(typed_array.buffer);
+                // Store in chrome.storage.local
+                const storageObject = {};
+                storageObject[filename] = base64String;
+                chrome.storage.local.set(storageObject, function() {
+                    console.log('Stored fetched data in storage');
+                });
+                callback(null, typed_array.buffer);
+            };
+            xhr.onerror = function (err) {
+                callback(err, null);
+            };
+            xhr.send();
+        }
+    });
 };
 
 /**
diff --git a/node_modules/kuromoji/src/loader/DictionaryLoader.js b/node_modules/kuromoji/src/loader/DictionaryLoader.js
index 5f88c0b..8c6988b 100644
--- a/node_modules/kuromoji/src/loader/DictionaryLoader.js
+++ b/node_modules/kuromoji/src/loader/DictionaryLoader.js
@@ -35,6 +35,7 @@ DictionaryLoader.prototype.loadArrayBuffer = function (file, callback) {
     throw new Error("DictionaryLoader#loadArrayBuffer should be overwrite");
 };
 
+
 /**
  * Load dictionary files
  * @param {DictionaryLoader~onLoad} load_callback Callback function called after loaded
@@ -48,7 +49,7 @@ DictionaryLoader.prototype.load = function (load_callback) {
         // Trie
         function (callback) {
             async.map([ "base.dat.gz", "check.dat.gz" ], function (filename, _callback) {
-                loadArrayBuffer(path.join(dic_path, filename), function (err, buffer) {
+                loadArrayBuffer(new URL(filename, dic_path).href, function (err, buffer) {
                     if(err) {
                         return _callback(err);
                     }
@@ -68,7 +69,7 @@ DictionaryLoader.prototype.load = function (load_callback) {
         // Token info dictionaries
         function (callback) {
             async.map([ "tid.dat.gz", "tid_pos.dat.gz", "tid_map.dat.gz" ], function (filename, _callback) {
-                loadArrayBuffer(path.join(dic_path, filename), function (err, buffer) {
+                loadArrayBuffer(new URL(filename, dic_path).href, function (err, buffer) {
                     if(err) {
                         return _callback(err);
                     }
@@ -88,7 +89,7 @@ DictionaryLoader.prototype.load = function (load_callback) {
         },
         // Connection cost matrix
         function (callback) {
-            loadArrayBuffer(path.join(dic_path, "cc.dat.gz"), function (err, buffer) {
+            loadArrayBuffer(new URL("cc.dat.gz", dic_path).href, function (err, buffer) {
                 if(err) {
                     return callback(err);
                 }
@@ -100,7 +101,7 @@ DictionaryLoader.prototype.load = function (load_callback) {
         // Unknown dictionaries
         function (callback) {
             async.map([ "unk.dat.gz", "unk_pos.dat.gz", "unk_map.dat.gz", "unk_char.dat.gz", "unk_compat.dat.gz", "unk_invoke.dat.gz" ], function (filename, _callback) {
-                loadArrayBuffer(path.join(dic_path, filename), function (err, buffer) {
+                loadArrayBuffer(new URL(filename, dic_path).href, function (err, buffer) {
                     if(err) {
                         return _callback(err);
                     }
